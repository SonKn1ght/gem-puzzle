{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/index.js","webpack:///./src/model/game-model.js","webpack:///./src/model/observer.js","webpack:///./src/model/score-model.js","webpack:///./src/presentor/game-presenter.js","webpack:///./src/utils/const.js","webpack:///./src/utils/stack.js","webpack:///./src/utils/utils-for-model.js","webpack:///./src/utils/utils.js","webpack:///./src/view/absctract-view.js","webpack:///./src/view/control-panel.js","webpack:///./src/view/game-view.js","webpack:///./src/view/score-view.js"],"names":[],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;;AClFA;AAAA;AAAA;AAAA;AAA2C;AACE;AACU;;AAEvD;;AAEA,sBAAsB,yDAAS;AAC/B,uBAAuB,0DAAU;;AAEjC,0BAA0B,iEAAa;;AAEvC;;;;;;;;;;;;;ACXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkC;AACoC;AACnC;AACc;AACmB;;AAErD,wBAAwB,iDAAQ;AAC/C;AACA;AACA;AACA;AACA,wBAAwB,oDAAK;AAC7B;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,wBAAwB,oEAAe;AACvC;AACA,KAAK;AACL;AACA,wBAAwB,oEAAe;AACvC,wBAAwB,4EAAa;;AAErC;AACA;AACA;;AAEA,0BAA0B,0EAAW;AACrC,QAAQ,mEAAsB;AAC9B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,oDAAK;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBAAsB,oEAAe;AACrC,sBAAsB,4EAAa;;AAEnC;AACA,wBAAwB,0EAAW;AACnC,MAAM,mEAAsB;AAC5B;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,6BAA6B,uDAAU;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,oBAAoB,uDAAU;;AAE9B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,mBAAmB,uDAAU;AAC7B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACnOA;AAAA;AAAe;AACf;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA,0CAA0C,iCAAiC,EAAE;AAC7E;AACA;;;;;;;;;;;;;AClBA;AAAA;AAAA;AAAkC;;AAEnB,yBAAyB,iDAAQ;AAChD;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,oEAAoE;AACpE;AACA,kEAAkE;AAClE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;;;;;;;;;;;;ACvDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwE;AAC/B;AACE;AACU;AACO;AACZ;;AAEhD;AACA;;AAEe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA,sCAAsC,2DAAgB;;AAEtD,IAAI,2DAAM;AACV;AACA,MAAM,2DAAc;AACpB;AACA;;AAEA;AACA;AACA;AACA,sDAAsD,+EAAgB,iCAAiC;AACvG;AACA,8BAA8B,uDAAQ;AACtC;AACA,IAAI,2DAAM,wDAAwD,2DAAc;AAChF;AACA;;AAEA;AACA,8BAA8B,uDAAQ;AACtC;AACA,IAAI,2DAAM,wDAAwD,2DAAc;AAChF;AACA;AACA;AACA;;AAEA;AACA,+BAA+B,wDAAS;;AAExC,IAAI,2DAAM,yDAAyD,2DAAc;AACjF;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,2BAA2B,uDAAU,WAAW,uDAAU;AAC1D;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,IAAI,2DAAM;AACV;;AAEA;AACA;AACA,2BAA2B,uDAAU,eAAe,uDAAU;AAC9D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,sDAAsD,+EAAgB,iCAAiC;AACvG,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,2BAA2B,uDAAU,YAAY,uDAAU;AAC3D;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gCAAgC,+BAA+B;AAC/D,iCAAiC,gCAAgC;AACjE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA,+BAA+B,uDAAU;AACzC,UAAU,uDAAU;AACpB;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;;AAEA;AACA;AACA,WAAW,uDAAU;AACrB;AACA;AACA,WAAW,uDAAU;AACrB;AACA;AACA,WAAW,uDAAU;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,uDAAU;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,uDAAU;AACrB,QAAQ,2DAAM;AACd;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,uDAAU;AACrB;AACA;AACA,WAAW,uDAAU;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC/QA;AAAA;AAAA;AAAA;AAAA;AAAO;AACP;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AC3BA;AAAA;AAAe;AACf;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;;;;;;;;;;;;ACvCA;AAAA;AAAA;AAAA;AAAO;AACP;AACA;;AAEA;AACA;;AAEO;AACP;AACA,iBAAiB,mBAAmB;AACpC;AACA,uDAAuD,+BAA+B,EAAE;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,oBAAoB,WAAW;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA,mBAAmB,eAAe;AAClC;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH;;;;;;;;;;;;;ACrFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAyC;AACS;;AAE3C;AACP;AACA;;AAEA;AACA;;AAEO;AACP;AACA,SAAS,qDAAc;AACvB;AACA;AACA,SAAS,qDAAc;AACvB;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;;AAEA,6BAA6B,4DAAY;AACzC;AACA;;AAEA;AACA;AACA;;AAEA;AACO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,OAAO;AAC7B;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA,cAAc,cAAc,GAAG,gBAAgB,GAAG,iBAAiB;AACnE;;AAEA,YAAY,gBAAgB,GAAG,iBAAiB;AAChD;;AAEO;AACP;AACA;;AAEO;AACP;AACA;;;;;;;;;;;;;ACpEA;AAAA;AAAA;AAA+C;;AAEhC;AACf;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,sBAAsB,kEAAa;AACnC;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;AC1BA;AAAA;AAAA;AAAA;AAA4C;AACQ;;AAErC,+BAA+B,uDAAY;AAC1D;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,oCAAoC,uEAAkB;AACtD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC7OA;AAAA;AAAA;AAAA;AAA4C;AAGpB;;AAExB;AACA;AACA,cAAc,IAAI;AAClB,gCAAgC,UAAU,SAAS,aAAa,UAAU,EAAE,GAAG,cAAc,oEAAe,6BAA6B;AACzI,+BAA+B,UAAU,WAAW,WAAW,IAAI,cAAc;AACjF,GAAG;AACH;;AAEe,uBAAuB,uDAAY;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mDAAmD,yBAAyB,GAAG;AAC/E;AACA,qCAAqC,WAAW,SAAS,6DAA6D;AACtH,uBAAuB,iBAAiB;AACxC;AACA,MAAM;AACN,yDAAyD,iBAAiB;AAC1E;AACA;;AAEA;AACA;AACA;AACA;AACA,iEAAiE,uEAAkB,qBAAqB,KAAK,iBAAiB;AAC9H,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA,iFAAiF,YAAY;AAC7F;;AAEA,sCAAsC,sEAAiB;AACvD,oCAAoC,sEAAiB;;AAErD,mCAAmC,8EAAyB;AAC5D,iCAAiC,8EAAyB;;AAE1D,qCAAqC,0BAA0B,GAAG,qBAAqB;AACvF,mCAAmC,wBAAwB,GAAG,uBAAuB;;AAErF;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC3FA;AAAA;AAAA;AAAA;AAA4C;AACQ;;AAEpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,MAAM;AACvD,gDAAgD,eAAe;AAC/D,mDAAmD,uEAAkB,mBAAmB;AACxF;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEe,wBAAwB,uDAAY;AACnD;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,8FAA8F,oCAAoC;AAClI;AACA;AACA;AACA;AACA;AACA,8FAA8F,oCAAoC;AAClI;AACA;AACA;AACA;AACA;AACA,8FAA8F,oCAAoC;AAClI;AACA;AACA;AACA;AACA;AACA,8FAA8F,oCAAoC;AAClI;AACA;AACA;AACA;AACA;AACA,8FAA8F,oCAAoC;AAClI;AACA;AACA;AACA;AACA;AACA,8FAA8F,oCAAoC;AAClI;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.js\");\n","import GameModel from './model/game-model';\nimport ScoreModel from './model/score-model';\nimport GamePresenter from './presentor/game-presenter';\n\nconst bodyElement = document.querySelector(`body`);\n\nconst gameModel = new GameModel();\nconst scoreModel = new ScoreModel();\n\nconst gamePresenter = new GamePresenter(bodyElement, gameModel, scoreModel);\n\ngamePresenter.init();\n","import Observer from './observer';\nimport { shuffleGame, generateGraph } from '../utils/utils-for-model';\nimport Stack from '../utils/stack';\nimport { getVoidPosition } from '../utils/utils';\nimport { UpdateType, NUMBER_OF_PERMUTATIONS } from \"../utils/const\";\n\nexport default class GameModel extends Observer {\n  constructor() {\n    super();\n    this._currentGame = [];\n    this._statsCurrentGame = {};\n    this._logGame = new Stack();\n    this._storage = window.localStorage;\n    this._timeStop = false;\n\n    // биндим что бы не терять контекст в таймауте\n    this.measuringTime = this.measuringTime.bind(this);\n    this._notify = this._notify.bind(this);\n    this.completeGame = this.completeGame.bind(this);\n  }\n\n  init(options) {\n    this._statsCurrentGame.surrender = false;\n    if (options === `load`) {\n      this.loadGame();\n      this._voidValue = getVoidPosition(this._currentGameOptions.size);\n      this.measuringTime();\n    } else {\n      this._currentGameOptions = options;\n      this._voidValue = getVoidPosition(options.size);\n      const gameGraph = generateGraph(parseInt(options.size, 10));\n\n      this._statsCurrentGame.startTime = new Date();\n      this._statsCurrentGame.countMoves = 0;\n      this.measuringTime();\n\n      this._currentGame = shuffleGame(gameGraph,\n        NUMBER_OF_PERMUTATIONS[options.size],\n        this._logGame, this._voidValue);\n      this.saveGame();\n    }\n  }\n\n  checkSave() {\n    // проверяем наличие всех данных для игры в LocalStorage\n    return (JSON.parse(this._storage.getItem(`theStateOfTheCurrentGameIsWrittenHere`)) !== null\n      && JSON.parse(this._storage.getItem(`optionsForTheGameAreStoredHere`)) !== null\n      && JSON.parse(this._storage.getItem(`hereIsTheLogOfTheCurrentGame`)) !== null\n      && JSON.parse(this._storage.getItem(`hereIsTheStatisticsOfTheCurrentGame`)) !== null\n    );\n  }\n\n  loadGame() {\n    // тут огород что бы заного записать данные из строк в действующие объекты\n    // длинные ключи с надеждой на уникальность\n    this._currentGame = JSON.parse(this._storage.getItem(`theStateOfTheCurrentGameIsWrittenHere`));\n    this._currentGameOptions = JSON.parse(this._storage.getItem(`optionsForTheGameAreStoredHere`));\n    const logObject = JSON.parse(this._storage.getItem(`hereIsTheLogOfTheCurrentGame`));\n    this._logGame = new Stack(logObject.storage);\n    const statsCurrentGameObject = JSON.parse(this._storage.getItem(`hereIsTheStatisticsOfTheCurrentGame`));\n    this._statsCurrentGame.countMoves = statsCurrentGameObject.countMoves;\n    this._statsCurrentGame.durationGame = statsCurrentGameObject.durationGame;\n    this._statsCurrentGame.endTime = new Date();\n    // тут создаем дату в прошлом вычитая сохраненую разность из текущего времени\n    const rewoundTime = this._statsCurrentGame.endTime.getTime()\n      - statsCurrentGameObject.durationGame;\n    this._statsCurrentGame.startTime = new Date(rewoundTime);\n  }\n\n  restart(updateType, update) {\n    this._timeStop = false;\n    // скидывание лога\n    this._logGame.clear();\n    this._currentGame = [];\n    this._statsCurrentGame.surrender = false;\n    this._currentGameOptions = update;\n    // скидывание счетчика и таймера в модели\n    this._statsCurrentGame.countMoves = 0;\n    this._statsCurrentGame.startTime = new Date();\n\n    this._voidValue = getVoidPosition(update.size);\n    const gameGraph = generateGraph(parseInt(update.size, 10));\n\n    // генерации новой игры с учетом принятых опций\n    this._currentGame = shuffleGame(gameGraph,\n      NUMBER_OF_PERMUTATIONS[update.size],\n      this._logGame, this._voidValue);\n    // удаляем данные старой игры записываем новую\n    this.saveGame();\n    this.measuringTime();\n\n    this._notify(updateType, update);\n  }\n\n  getGame() {\n    return this._currentGame;\n  }\n\n  getCurrentGameOptions() {\n    return this._currentGameOptions;\n  }\n\n  getCurrentGameStats() {\n    return this._statsCurrentGame;\n  }\n\n  updateGame(updateType, update) {\n    // получаем текущую позицию воида\n    const voidValue = this._voidValue;\n    const voidPosition = this._currentGame.findIndex((el) => {\n      return el.value === this._voidValue;\n    });\n    // получаем текущую позицию кликнутого-дропаемого элемента\n    const updatePosition = this._currentGame.findIndex((el) => {\n      return el.value === +update;\n    });\n    // проверяем доступность перемещения для полученного значения\n    if (!this._currentGame[voidPosition].allowedOffset.includes(updatePosition)) {\n      return;\n    }\n\n    // меняем местами значения пустого и полученной позиции\n    this._currentGame[voidPosition].value = this._currentGame[updatePosition].value;\n    this._currentGame[updatePosition].value = voidValue;\n\n    // действия в блоке выполняются покуда пользователь не выбросил белый флаг\n    // разрыв в блоке так себе выглядит\n    if (!this._statsCurrentGame.surrender) {\n      // считаем ходы пользователя\n      this._statsCurrentGame.countMoves += 1;\n    }\n\n    // готовим измененые параметры для отправки в презентор\n    const updateAll = {\n      numberBone: update,\n      countMoves: this._statsCurrentGame.countMoves,\n    };\n\n    if (!this._statsCurrentGame.surrender) {\n      // // пишем все номера перемещаемых костяшек по порядку в стэк\n      this._logGame.push(update);\n      // сэйвим игру по ходам\n      this.saveGame();\n      // проверяем не произошел ли выигрыш\n      this.checkWin();\n      this._notify(updateType, updateAll);\n      return;\n    }\n\n    this._notify(updateType, updateAll);\n  }\n\n  measuringTime(updateType = UpdateType.MEASURING_TIME) {\n    if (this._timeStop) {\n      return;\n    }\n    // самозацикленные часики с сэйвом игры каждую секунду\n    this.saveGame();\n    this._statsCurrentGame.endTime = new Date();\n    this._statsCurrentGame.durationGame = this._statsCurrentGame.endTime.getTime()\n      - this._statsCurrentGame.startTime.getTime();\n\n    this._notify(updateType, this._statsCurrentGame);\n\n    setTimeout(this.measuringTime, 1000);\n  }\n\n  completeGame() {\n    if (this._statsCurrentGame.surrender === false) {\n      this._logGame.optimize();\n    }\n\n    // меняю флаг что бы обработать выигрыш компьютера, использую метод модели updateGame\n    // дабы менять и состояние игры в данных и в представлении\n    this._statsCurrentGame.surrender = true;\n    if (this._logGame.size() === 0) {\n      // по завршению авторешения чистим сторадж с сохраненой игрой\n      // кидаем проверку на конец игры => будет выкинут попап с предложением попробовать еще раз\n      // также результат автозавершения не пишется в рекорды\n      // переключаем флаг что пользователь сдался обратно\n      this.clearSaveGame();\n      this.checkWin();\n      this._statsCurrentGame._surrender = false;\n      return;\n    }\n\n    // берем индекс обратной размотки по одному из нашего стэка\n    const swapIndex = this._logGame.pop();\n    // отправляем в представление через рекурсивный вызов функции пока в стэке не кончатся значения\n    this.updateGame(UpdateType.MOVING, swapIndex);\n\n    // таймаут в длину анимации хода, что бы можно было смотреть анимированное завершение игры\n    setTimeout(this.completeGame, 510);\n  }\n\n  checkWin() {\n    let isWin = true;\n    // пробегаем по полю игры сравнивая состояния положений ячеек и значений лежащих в них\n    this._currentGame.forEach((currentElement) => {\n      if (currentElement.posFix !== currentElement.value) {\n        isWin = false;\n      }\n    });\n    if (isWin) {\n      // останавливаем часы\n      this._timeStop = true;\n      // прокидываю стату в обработку завершения игры в стате данные\n      // о том пользователь сам выиграл или за него доигрывали\n      this._notify(UpdateType.WIN, this._statsCurrentGame);\n    }\n  }\n\n  saveGame() {\n    // метод сохраняет данные текущей игры в LocalStorage\n    this._storage.setItem(`theStateOfTheCurrentGameIsWrittenHere`, JSON.stringify(this._currentGame));\n    this._storage.setItem(`optionsForTheGameAreStoredHere`, JSON.stringify(this._currentGameOptions));\n    this._storage.setItem(`hereIsTheLogOfTheCurrentGame`, JSON.stringify(this._logGame));\n    this._storage.setItem(`hereIsTheStatisticsOfTheCurrentGame`, JSON.stringify(this._statsCurrentGame));\n  }\n\n  clearSaveGame() {\n    // метод очищает данные игры => перезаписывая данные в LocalStorage на null\n    this._storage.setItem(`theStateOfTheCurrentGameIsWrittenHere`, JSON.stringify(null));\n    this._storage.setItem(`optionsForTheGameAreStoredHere`, JSON.stringify(null));\n    this._storage.setItem(`hereIsTheLogOfTheCurrentGame`, JSON.stringify(null));\n    this._storage.setItem(`hereIsTheStatisticsOfTheCurrentGame`, JSON.stringify(null));\n  }\n}\n","export default class Observer {\n  constructor() {\n    this._observer = [];\n  }\n\n  addObserver(observer) {\n    this._observer.push(observer);\n  }\n\n  removeObserver(observer) {\n    this._observer = this._observer.filter((existedObserver) => {\n      return existedObserver !== observer;\n    });\n  }\n\n  _notify(event, payload) {\n    this._observer.forEach((observer) => { return observer(event, payload); });\n  }\n}\n","import Observer from './observer';\n\nexport default class ScoreModel extends Observer {\n  constructor() {\n    super();\n    this._storage = window.localStorage;\n\n    this._score = {};\n  }\n\n  _setStorage() {\n    this._storage.setItem(`theseAreTheTopWinnersInSuperTagging`, JSON.stringify(this._score));\n  }\n\n  getStorage() {\n    // подстраховка кидаю проверку была ли загрузка уже на этом компьютере если нет задаю обнуляю\n    // хранилище рекордов по используемому ключу что бы исключить возможность\n    //  что под этим ключом записано что-то не этим приложением\n    if (this._storage.getItem(`initiaDownload//.12//32/1oxhht:amde;;quiasskojHnae,K`) !== `yes`) {\n      this._storage.setItem(`theseAreTheTopWinnersInSuperTagging`, null);\n      this._storage.setItem(`initiaDownload//.12//32/1oxhht:amde;;quiasskojHnae,K`, `yes`);\n    }\n\n    if (JSON.parse(this._storage.getItem(`theseAreTheTopWinnersInSuperTagging`)) === null) {\n      this._score = {\n        3: [],\n        4: [],\n        5: [],\n        6: [],\n        7: [],\n        8: [],\n      };\n      return;\n    }\n\n    this._score = JSON.parse(this._storage.getItem(`theseAreTheTopWinnersInSuperTagging`));\n  }\n\n  getScore() {\n    return this._score;\n  }\n\n  updateStorage(sizeGame, stats) {\n    const currentSizeResult = this._score[sizeGame];\n    currentSizeResult.push({\n      countMoves: stats.countMoves,\n      durationGame: stats.durationGame,\n    });\n    currentSizeResult.sort((first, second) => {\n      return first.countMoves - second.countMoves;\n    });\n    this._score[sizeGame] = currentSizeResult.slice(0, 10);\n\n    this._setStorage();\n  }\n}\n","import { UserAction, UpdateType, RenderPosition } from '../utils/const';\nimport GameView from '../view/game-view';\nimport ScoreView from '../view/score-view';\nimport ControlPanelView from '../view/control-panel';\nimport { getRandomInteger } from '../utils/utils-for-model';\nimport { render, remove } from '../utils/utils';\n\nconst MIN_IMG_NUMBER = 1;\nconst MAX_IMG_NUMBER = 150;\n\nexport default class GamePresenter {\n  constructor(gameContainer, gameModel, scoreModel) {\n    this._gameContainer = gameContainer;\n    this._gameModel = gameModel;\n    this._scoreModel = scoreModel;\n    // используется по факту для самого первого запуска\n    this._optionGame = {\n      size: `4`,\n      numberActive: true,\n      background: null,\n      startTime: new Date(),\n    };\n\n    this._handleNewGameClick = this._handleNewGameClick.bind(this);\n    this._handleScoreClick = this._handleScoreClick.bind(this);\n    this._handleHelpGameClick = this._handleHelpGameClick.bind(this);\n    this._handleNumberDisplaySwitch = this._handleNumberDisplaySwitch.bind(this);\n    this._handleGiveBackground = this._handleGiveBackground.bind(this);\n    this._handleScoreCloseClick = this._handleScoreCloseClick.bind(this);\n    this._handleSizeChange = this._handleSizeChange.bind(this);\n    this._handleBoneClick = this._handleBoneClick.bind(this);\n    this._handleBoneDragDrop = this._handleBoneDragDrop.bind(this);\n\n    this._handleModelEvent = this._handleModelEvent.bind(this);\n\n    this._gameModel.addObserver(this._handleModelEvent);\n  }\n\n  init() {\n    this._renderControlPanel();\n    if (this._gameModel.checkSave()) {\n      this._gameModel.init(`load`);\n      this._renderLoadGame();\n    } else {\n      this._gameModel.init(this._optionGame);\n      this._renderNewGame();\n    }\n\n    this._scoreModel.getStorage();\n  }\n\n  _renderControlPanel() {\n    this._controlPanelComponent = new ControlPanelView();\n\n    render(this._gameContainer,\n      this._controlPanelComponent.getElement(),\n      RenderPosition.AFTERBEGIN);\n    this._setHandlersControlPanel();\n  }\n\n  _renderNewGame() {\n    // при рестарте обновляем картинку если она включена пользователем\n    if (this._optionGame.background !== null) {\n      this._optionGame.background = `./assets/image/${getRandomInteger(MIN_IMG_NUMBER, MAX_IMG_NUMBER)}.jpg`;\n    }\n    this._gameComponent = new GameView(this._gameModel.getGame(), this._optionGame);\n    // тут будем устанавливать на игру внешние обработчики вытащил в отдельный метод////\n    render(this._gameContainer, this._gameComponent.getElement(), RenderPosition.BEFOREEND);\n    this._setHandlersGameComponent();\n  }\n\n  _renderLoadGame() {\n    this._gameComponent = new GameView(this._gameModel.getGame(),\n      this._gameModel.getCurrentGameOptions());\n    render(this._gameContainer, this._gameComponent.getElement(), RenderPosition.BEFOREEND);\n    this._setHandlersGameComponent();\n    // обновляем счетчик при перезагрузке страницы\n    this._controlPanelComponent.updateCounter(this._gameModel.getCurrentGameStats());\n  }\n\n  _renderScore() {\n    this._scoreComponent = new ScoreView(this._scoreModel.getScore(), this._optionGame.size);\n\n    render(this._gameContainer, this._scoreComponent.getElement(), RenderPosition.BEFOREEND);\n    this._setHandlersScoreComponent();\n  }\n\n  _setHandlersControlPanel() {\n    this._controlPanelComponent.setNewGameClickHandler(this._handleNewGameClick);\n    this._controlPanelComponent.setSizeChangeHandler(this._handleSizeChange);\n    this._controlPanelComponent.setScoreClickHandler(this._handleScoreClick);\n    this._controlPanelComponent.setHelpGameClickHandler(this._handleHelpGameClick);\n    this._controlPanelComponent.setNumberDisplaySwitchHandler(this._handleNumberDisplaySwitch);\n    this._controlPanelComponent.setGiveBackgroundHandler(this._handleGiveBackground);\n  }\n\n  _setHandlersGameComponent() {\n    this._gameComponent.setBoneClickHandler(this._handleBoneClick);\n    this._gameComponent.setBoneDragDropHandler(this._handleBoneDragDrop);\n  }\n\n  _setHandlersScoreComponent() {\n    this._scoreComponent.setCloseScoreClickHandler(this._handleScoreCloseClick);\n  }\n\n  _handleNewGameClick(evt) {\n    evt.preventDefault();\n    this._handleViewAction(UserAction.NEW_GAME, UpdateType.RESTART, this._optionGame);\n  }\n\n  _handleScoreClick(evt) {\n    evt.preventDefault();\n    this._renderScore();\n  }\n\n  _handleScoreCloseClick(evt) {\n    evt.preventDefault();\n    remove(this._scoreComponent);\n  }\n\n  _handleHelpGameClick(evt) {\n    evt.preventDefault();\n    this._handleViewAction(UserAction.SHOW_HOW_WIN, UpdateType.SURRENDER);\n  }\n\n  _handleNumberDisplaySwitch(evt) {\n    evt.preventDefault();\n    // меняем настройки => будут активны для новой игры и также сохраняютсяв автосэйве\n    this._optionGame.numberActive = !this._optionGame.numberActive;\n    // меняем состояние в текущей игре в отображении\n    this._gameComponent.numberDisplaySwitch();\n  }\n\n  _handleGiveBackground(evt) {\n    evt.preventDefault();\n    // меняем настройки => будут активны для новой игры и также сохраняютсяв автосэйве\n    if (this._optionGame.background === null) {\n      this._optionGame.background = `./assets/image/${getRandomInteger(MIN_IMG_NUMBER, MAX_IMG_NUMBER)}.jpg`;\n    } else {\n      this._optionGame.background = null;\n    }\n  }\n\n  _handleSizeChange(evt) {\n    this._optionGame.size = evt.target.value;\n  }\n\n  _handleBoneClick(evt) {\n    this._handleViewAction(UserAction.SWAP_BONE, UpdateType.MOVING, evt.target.dataset.position);\n  }\n\n  _handleBoneDragDrop(evt) {\n    // если будет время доработать соскальзывание курсора с костяшки при быстром перемещении мыши\n    evt.preventDefault();\n    const targetDrag = evt.target;\n    const container = this._gameComponent.getElement();\n    const dropTargetCoords = this._gameComponent.getElement().querySelector(`.zero`).getBoundingClientRect();\n\n    let startCoords = {\n      x: evt.clientX,\n      y: evt.clientY,\n    };\n\n    const onMouseMove = (moveEvt) => {\n      // получаю объект с координатами пустой костяшки\n      // удаляем обработчик кликов на период работы перетаскивания\n      moveEvt.preventDefault();\n      this._gameComponent.removeBoneClickHandler();\n\n      const shift = {\n        x: startCoords.x - moveEvt.clientX,\n        y: startCoords.y - moveEvt.clientY,\n      };\n\n      startCoords = {\n        x: moveEvt.clientX,\n        y: moveEvt.clientY,\n      };\n\n      targetDrag.style.zIndex = 20;\n      // отклучить transition иначен все не работает\n      targetDrag.style.transition = `none`;\n      targetDrag.style.top = `${targetDrag.offsetTop - shift.y}px`;\n      targetDrag.style.left = `${targetDrag.offsetLeft - shift.x}px`;\n    };\n\n    const onMouseUp = (upEvt) => {\n      upEvt.preventDefault();\n      // откладываем восстановление, что б не было эффекта пролета\n      // костяшки под другими при возврате на место и анимации влета в ячейку\n      setTimeout(() => {\n        targetDrag.style.zIndex = ``;\n        targetDrag.style.transition = ``;\n      }, 100);\n\n      // Проверяю попал ли отпускаемый элемент на пустую костяшку\n      if (dropTargetCoords.top < upEvt.clientY && dropTargetCoords.bottom > upEvt.clientY\n&& dropTargetCoords.left < upEvt.clientX && dropTargetCoords.right > upEvt.clientX) {\n        this._handleViewAction(UserAction.SWAP_BONE,\n          UpdateType.MOVING,\n          evt.target.dataset.position);\n        targetDrag.style.top = ``;\n        targetDrag.style.left = ``;\n      } else {\n        targetDrag.style.top = ``;\n        targetDrag.style.left = ``;\n      }\n\n      container.removeEventListener(`mousemove`, onMouseMove);\n      container.removeEventListener(`mouseup`, onMouseUp);\n      // восстанавливаем обработчик кликов после всего связанного с дропом\n      setTimeout(() => {\n        this._gameComponent.setBoneClickHandler(this._handleBoneClick);\n      }, 50);\n    };\n\n    container.addEventListener(`mousemove`, onMouseMove);\n    container.addEventListener(`mouseup`, onMouseUp);\n  }\n\n  _handleViewAction(actionType, updateType, update) {\n    switch (actionType) {\n      case UserAction.SWAP_BONE:\n        this._gameModel.updateGame(updateType, update);\n        break;\n      case UserAction.NEW_GAME:\n        this._gameModel.restart(updateType, update);\n        break;\n      case UserAction.SHOW_HOW_WIN:\n        // запускает процесс автозавершения в модели\n        this._gameModel.completeGame();\n        // кидаем lock на приложение на период автозавершения\n        this._controlPanelComponent.lockPage();\n        break;\n      default:\n        throw new Error(`something broke in handleViewAction`);\n    }\n  }\n\n  _handleModelEvent(updateType, data) {\n    switch (updateType) {\n      case UpdateType.MOVING:\n        this._gameComponent.swapBone(data.numberBone);\n        this._controlPanelComponent.updateCounter(data);\n        // озвучка задействуется здесь только по возвращению\n        // подтверждения валидности перемещения из модели\n        this._controlPanelComponent.playSoundPressBone();\n        break;\n      case UpdateType.RESTART:\n        remove(this._gameComponent);\n        this._renderNewGame();\n        // при рестарте запускаем без параметров сбрасывая счетчики во view на 0\n        this._controlPanelComponent.updateCounter();\n        this._controlPanelComponent.updateTime();\n        this._controlPanelComponent.unlockPage();\n        break;\n      case UpdateType.MEASURING_TIME:\n        this._controlPanelComponent.updateTime(data);\n        break;\n      case UpdateType.WIN:\n        if (!data.surrender) {\n          // обновляем только если пользователь сам выиграл\n          this._scoreModel.updateStorage(this._optionGame.size, data);\n        }\n        this._gameComponent.showEndGame(data);\n        this._controlPanelComponent.unlockPage();\n        break;\n      default:\n        throw new Error(`something broke in handleModelEvent`);\n    }\n  }\n}\n","export const UserAction = {\n  SWAP_BONE: `SWAP_BONE`,\n  NEW_GAME: `NEW_GAME`,\n  SHOW_HOW_WIN: `SHOW_HOW_WIN`,\n  SCORING_SWAP_BONE: `SCORING_SWAP_BONE`,\n};\n\nexport const UpdateType = {\n  MOVING: `MOVING`,\n  RESTART: `RESTART`,\n  MEASURING_TIME: `MEASURING_TIME`,\n  WIN: `WIN`,\n  SURRENDER: `SURRENDER`,\n};\n\nexport const RenderPosition = {\n  AFTERBEGIN: `afterbegin`,\n  BEFOREEND: `beforeend`,\n};\n\nexport const NUMBER_OF_PERMUTATIONS = {\n  3: 20,\n  4: 40,\n  5: 60,\n  6: 150,\n  7: 200,\n  8: 250,\n};\n\n","export default class Stack {\n  constructor(storage = []) {\n    this.storage = storage;\n  }\n\n  push(value) {\n    this.storage.push(value);\n  }\n\n  pop() {\n    if (this.storage.length === 0) {\n      return undefined;\n    }\n\n    return this.storage.pop();\n  }\n\n  size() {\n    return this.storage.length;\n  }\n\n  clear() {\n    this.storage = [];\n  }\n\n  optimize() {\n    this.storage = this.storage.reduce((acc, cur, i) => {\n      if (i === 0) {\n        acc.push(+cur);\n        return acc;\n      }\n      if (parseInt(cur, 10) === parseInt(acc[acc.length - 1], 10)) {\n        acc.pop();\n        return acc;\n      }\n      acc.push(+cur);\n      return acc;\n    }, []);\n  }\n}\n","export const getRandomInteger = (a = 0, b = 1) => {\n  const lower = Math.ceil(Math.min(a, b));\n  const upper = Math.floor(Math.max(a, b));\n\n  return Math.floor(lower + Math.random() * (upper - lower + 1));\n};\n\nexport const shuffleGame = (array, numberOfMixes, log, voidValue) => {\n  const mixedArray = array.slice();\n  for (let i = 0; i < numberOfMixes; i += 1) {\n    // ищем положение пустой клетки по ее значению\n    const voidPosition = mixedArray.findIndex((el) => { return el.value === voidValue; });\n    // выбираем индекс случайного перемещения из доступных по индексу их в массиве\n    const swapIndex = getRandomInteger(0, mixedArray[voidPosition].allowedOffset.length - 1);\n    // определяем доступное смещение\n    const swapPosition = mixedArray[voidPosition].allowedOffset[swapIndex];\n    log.push(mixedArray[swapPosition].value);\n    // меняем местами ноль и одну из доступных позиций\n    mixedArray[voidPosition].value = mixedArray[swapPosition].value;\n    mixedArray[swapPosition].value = voidValue;\n    // пишем все перемещения в стэк старый вариант пока подумать еще над этим\n  }\n  // возвращаем перемешанную комбинацию\n  return mixedArray;\n};\n\n// разматывает саму структуру данных, не визуал, подумать нужно ли\n// export const stirBackGame = (array, log, notify, updateType) => {\n//   const arrayBack = array.slice();\n//   const count = log.size();\n//   for (let i = 0; i < count; i += 1) {\n//     const swapIndex = log.pop();\n//\n//     // notify(updateType, swapIndex[0]);\n//\n//     const swapStorage = arrayBack[swapIndex[0]].value;\n//     arrayBack[swapIndex[0]].value = arrayBack[swapIndex[1]].value;\n//     arrayBack[swapIndex[1]].value = swapStorage;\n//   }\n//   return arrayBack;\n// };\n\n// Функции для генерации стартовых графов.\n// граф представляет собой массив объектов с тремя значениями.\n// первое значение позиция клетки на игровом поле.\n// второе значение - значение костяшки занимающей данную позицию.\n// третье значение - массив содержаший список возможных перемещений\n// с данной точки по правилам пятнашек.\nexport const generateGraph = (size) => {\n  const initialArray = (() => {\n    const array = [];\n    for (let i = 0; i < size ** 2; i += 1) {\n      array.push(i);\n    }\n    return array;\n  })();\n\n  return initialArray.reduce((acc, cur, i, array) => {\n    const accessiblePaths = [];\n    if (cur % size === size - 1) {\n      accessiblePaths.push(cur + size);\n      accessiblePaths.push(cur - size);\n      accessiblePaths.push(cur - 1);\n    } else if (cur % size === 0) {\n      accessiblePaths.push(cur + size);\n      accessiblePaths.push(cur - size);\n      accessiblePaths.push(cur + 1);\n    } else {\n      accessiblePaths.push(cur + size);\n      accessiblePaths.push(cur - size);\n      accessiblePaths.push(cur + 1);\n      accessiblePaths.push(cur - 1);\n    }\n\n    const accessiblePathsFilters = accessiblePaths.filter((current) => {\n      return (current >= 0 && current < array.length);\n    });\n\n    acc.push({\n      posFix: cur,\n      value: cur,\n      allowedOffset: accessiblePathsFilters.sort(),\n    });\n    return acc;\n  }, []);\n};\n","import { RenderPosition } from './const';\nimport AbstractView from '../view/absctract-view';\n\nexport const createElement = (template) => {\n  const newElement = document.createElement(`div`);\n  newElement.innerHTML = template;\n\n  return newElement.firstChild;\n};\n\nexport const render = (container, child, place) => {\n  switch (place) {\n    case RenderPosition.AFTERBEGIN:\n      container.prepend(child);\n      break;\n    case RenderPosition.BEFOREEND:\n      container.append(child);\n      break;\n    default:\n      throw new Error(`something broke in render function`);\n  }\n};\n\nexport const remove = (component) => {\n  if (component === null) {\n    return;\n  }\n\n  if (!(component instanceof AbstractView)) {\n    throw new Error(`Can remove only components`);\n  }\n\n  component.getElement().remove();\n  component.removeElement();\n};\n\n// по размеру ребра поля получаем ключ последнего элемента в массиве\nexport const getVoidPosition = (size) => {\n  return parseInt(size, 10) ** 2 - 1;\n};\n\nconst addZero = (number) => {\n  let numberCurrent = String(number);\n  const twoDigit = 2;\n  if (numberCurrent.length === twoDigit) {\n    return number;\n  }\n  numberCurrent = `0${number}`;\n  return numberCurrent;\n};\n\nexport const formatGameDuration = (duration) => {\n  const hour = Math.floor((duration / (1000 * 60 * 60)) % 60);\n  const minute = Math.floor((duration / (1000 * 60)) % 60);\n  const seconds = Math.floor((duration / (1000)) % 60);\n  if (hour !== 0) {\n    return `${addZero(hour)}:${addZero(minute)}:${addZero(seconds)}`;\n  }\n\n  return `${addZero(minute)}:${addZero(seconds)}`;\n};\n\nexport const extractFirstClass = (str) => {\n  return str.slice(0, str.indexOf(` `));\n};\n\nexport const extractClassesExceptFirst = (str) => {\n  return str.slice(str.indexOf(` `) + 1, str.length);\n};\n","import { createElement } from '../utils/utils';\n\nexport default class AbstractView {\n  constructor() {\n    if (new.target === AbstractView) {\n      throw new Error(`Can not instantiate Abstract, only concrete one.`);\n    }\n    this._element = null;\n    this._callback = {};\n  }\n\n  _getTemplate() {\n    throw new Error(`Abstract method not implemented: getTemplate`);\n  }\n\n  getElement() {\n    if (!this._element) {\n      this._element = createElement(this._getTemplate());\n    }\n\n    return this._element;\n  }\n\n  removeElement() {\n    this._element = null;\n  }\n}\n","import AbstractView from './absctract-view';\nimport { formatGameDuration } from '../utils/utils';\n\nexport default class ControlPanelView extends AbstractView {\n  constructor() {\n    super();\n    this._soundActive = true;\n\n    this._countContainer = this.getElement().querySelector(`.control-panel__moves`);\n    this._timeContainer = this.getElement().querySelector(`.control-panel__time`);\n    this._hiddenOptions = this.getElement().querySelector(`.control-panel__hidden-options`);\n\n    this._newGameClickHandler = this._newGameClickHandler.bind(this);\n    this._scoreClickHandler = this._scoreClickHandler.bind(this);\n    this._helpGameClickHandler = this._helpGameClickHandler.bind(this);\n    this._sizeChangeHandler = this._sizeChangeHandler.bind(this);\n    this._numberDisplaySwitchHandler = this._numberDisplaySwitchHandler.bind(this);\n    this._giveBackgroundHandler = this._giveBackgroundHandler.bind(this);\n\n    this._handleOptionToggle = this._handleOptionToggle.bind(this);\n    this._handleCloseOptionAtStart = this._handleCloseOptionAtStart.bind(this);\n    this._handleSwitchNumbers = this._handleSwitchNumbers.bind(this);\n    this._handleSwitchSound = this._handleSwitchSound.bind(this);\n\n    this._setInnerHandlers();\n  }\n\n  _getTemplate() {\n    return `<div class=\"control-panel\">\n              <div class=\"control-panel__wrapper-first-row\">\n                <button class=\"control-panel__new-game btn\">Старт</button>\n                <button class=\"control-panel__setting-new-game-button btn\">Опции новой игры</button>\n                <div class=\"control-panel__hidden-options visually-hidden\">\n                                  <button class=\"control-panel__give-background btn \">Игра без картины</button>\n                <ul class=\"control-panel__size-control-list \">\n                  <li class=\"control-panel__size-item\">\n                    <label>\n                      <input class=\"visually-hidden\" type=\"radio\" name=\"size\" value=\"3\">\n                      <span class=\"radio-indicator\">3X3</span>\n                    </label>\n                  </li>\n                  <li class=\"control-panel__size-item\">\n                    <label>\n                      <input class=\"visually-hidden\" type=\"radio\" name=\"size\" value=\"4\" checked>\n                      <span class=\"radio-indicator\">4X4</span>\n                    </label>\n                  </li>\n                  <li class=\"control-panel__size-item\">\n                    <label>\n                      <input class=\"visually-hidden\" type=\"radio\" name=\"size\" value=\"5\">\n                      <span class=\"radio-indicator\">5X5</span>\n                    </label>\n                  </li>\n                  <li class=\"control-panel__size-item\">\n                    <label>\n                      <input class=\"visually-hidden\" type=\"radio\" name=\"size\" value=\"6\">\n                      <span class=\"radio-indicator\">6X6</span>\n                    </label>\n                  </li>\n                  <li class=\"control-panel__size-item\">\n                    <label>\n                      <input class=\"visually-hidden\" type=\"radio\" name=\"size\" value=\"7\">\n                      <span class=\"radio-indicator\">7X7</span>\n                    </label>\n                  </li>\n                  <li class=\"control-panel__size-item\">\n                    <label>\n                      <input class=\"visually-hidden\" type=\"radio\" name=\"size\" value=\"8\">\n                      <span class=\"radio-indicator\">8X8</span>\n                    </label>\n                  </li>\n                </ul>\n              </div>\n\n              </div>\n              <div class=\"control-panel__wrapper-second-row\">\n                <div class=\"control-panel__moves-container\">\n                Moves: <span class=\"control-panel__moves\">0</span>\n                </div>\n                <div class=\"control-panel__time-container\">\n                Time: <span class=\"control-panel__time\">00:00</span>\n                </div>\n                <button class=\"control-panel__score btn\">Score</button>\n              </div>\n              <div class=\"control-panel__wrapper-third-row\">\n                <button class=\"control-panel__end-game btn\">Доиграй!</button>\n                <button class=\"control-panel__control-sounds btn sound-active\"></button>\n                <button class=\"control-panel__switch-numbers btn\">Числа<br> убрать</button>\n              </div>\n              <audio id=\"sound\" src=\"./assets/sounds/Sound.mp3\"></audio>\n              <div class=\"lock-app visually-hidden\"></div>\n            </div>`;\n  }\n\n  // обновители отображения состояний метрики игры\n  updateCounter(statsCurrentGame) {\n    if (statsCurrentGame === undefined) {\n      this._countContainer.innerHTML = 0;\n    } else {\n      this._count = statsCurrentGame.countMoves;\n      this._countContainer.innerHTML = this._count;\n    }\n  }\n\n  updateTime(statsCurrentGame = `00:00`) {\n    if (typeof statsCurrentGame.durationGame !== `number`) {\n      this._timeContainer.innerHTML = `00:00`;\n      return;\n    }\n    this._timeContainer.innerHTML = formatGameDuration(statsCurrentGame.durationGame);\n  }\n\n  // крякалка\n  playSoundPressBone() {\n    if (this._soundActive) {\n      const audio = document.querySelector(`#sound`);\n      audio.currentTime = 0;\n      audio.play();\n    }\n  }\n\n  // блокировщик на время автокомплита\n  lockPage() {\n    this.getElement().querySelector(`.lock-app`).classList.remove(`visually-hidden`);\n  }\n\n  unlockPage() {\n    if (!this.getElement().querySelector(`.lock-app`).classList.contains(`visually-hidden`)) {\n      this.getElement().querySelector(`.lock-app`).classList.add(`visually-hidden`);\n    }\n  }\n\n  // внутренние ставим пачкой сразу\n  _setInnerHandlers() {\n    this.getElement().querySelector(`.control-panel__give-background`).addEventListener(`click`, this._handleGiveBackgroundView);\n    this.getElement().querySelector(`.control-panel__setting-new-game-button`).addEventListener(`click`, this._handleOptionToggle);\n    this.getElement().querySelector(`.control-panel__new-game`).addEventListener(`click`, this._handleCloseOptionAtStart);\n    this.getElement().querySelector(`.control-panel__switch-numbers`).addEventListener(`click`, this._handleSwitchNumbers);\n    this.getElement().querySelector(`.control-panel__control-sounds`).addEventListener(`click`, this._handleSwitchSound);\n  }\n\n  // сначала внутренние обработчики, отвечающие только за режимы внешнего вида\n  _handleGiveBackgroundView(evt) {\n    evt.preventDefault();\n    if (evt.target.innerHTML === `Игра без картины`) {\n      evt.target.innerHTML = `Игра с картиной`;\n    } else {\n      evt.target.innerHTML = `Игра без картины`;\n    }\n  }\n\n  _handleOptionToggle() {\n    this._hiddenOptions.classList.toggle(`visually-hidden`);\n  }\n\n  _handleCloseOptionAtStart() {\n    if (!this._hiddenOptions.classList.contains(`visually-hidden`)) {\n      this._hiddenOptions.classList.add(`visually-hidden`);\n    }\n  }\n\n  _handleSwitchNumbers(evt) {\n    evt.preventDefault();\n    if (evt.target.innerHTML === `Числа<br> убрать`) {\n      evt.target.innerHTML = `Числа<br> вернуть`;\n    } else {\n      evt.target.innerHTML = `Числа<br> убрать`;\n    }\n  }\n\n  _handleSwitchSound(evt) {\n    evt.preventDefault();\n    evt.target.classList.toggle(`sound-active`);\n    evt.target.classList.toggle(`sound-disable`);\n    this._soundActive = !this._soundActive;\n  }\n\n  // обработчикки и их установшики внешних воздействий\n  _newGameClickHandler(evt) {\n    evt.preventDefault();\n    this._callback.newGameClickHandler(evt);\n  }\n\n  setNewGameClickHandler(callback) {\n    this._callback.newGameClickHandler = callback;\n    this.getElement().querySelector(`.control-panel__new-game`).addEventListener(`click`, this._newGameClickHandler);\n  }\n\n  _scoreClickHandler(evt) {\n    evt.preventDefault();\n    this._callback.scoreClickHandler(evt);\n  }\n\n  setScoreClickHandler(callback) {\n    this._callback.scoreClickHandler = callback;\n    this.getElement().querySelector(`.control-panel__score`).addEventListener(`click`, this._scoreClickHandler);\n  }\n\n  _helpGameClickHandler(evt) {\n    evt.preventDefault();\n    this._callback.helpGameClickHandler(evt);\n  }\n\n  setHelpGameClickHandler(callback) {\n    this._callback.helpGameClickHandler = callback;\n    this.getElement().querySelector(`.control-panel__end-game`).addEventListener(`click`, this._helpGameClickHandler);\n  }\n\n  _sizeChangeHandler(evt) {\n    evt.preventDefault();\n    this._callback.sizeChangeHandler(evt);\n  }\n\n  setSizeChangeHandler(callback) {\n    this._callback.sizeChangeHandler = callback;\n    this.getElement().querySelector(`.control-panel__size-control-list`).addEventListener(`change`, this._sizeChangeHandler);\n  }\n\n  _numberDisplaySwitchHandler(evt) {\n    evt.preventDefault();\n    this._callback.numberDisplaySwitch(evt);\n  }\n\n  setNumberDisplaySwitchHandler(callback) {\n    this._callback.numberDisplaySwitch = callback;\n    this.getElement().querySelector(`.control-panel__switch-numbers`).addEventListener(`click`, this._numberDisplaySwitchHandler);\n  }\n\n  _giveBackgroundHandler(evt) {\n    evt.preventDefault();\n    this._callback.giveBackground(evt);\n  }\n\n  setGiveBackgroundHandler(callback) {\n    this._callback.giveBackground = callback;\n    this.getElement().querySelector(`.control-panel__give-background`).addEventListener(`click`, this._giveBackgroundHandler);\n  }\n}\n","import AbstractView from './absctract-view';\nimport {\n  getVoidPosition, formatGameDuration, extractFirstClass, extractClassesExceptFirst,\n} from '../utils/utils';\n\nconst getTemlateBones = (data, options, background) => {\n  return data.reduce((acc, cur, i) => {\n    return `${acc}<div\n              class=\"bone_img-${cur.value} bone_x${options.size} number_${i} ${cur.value === getVoidPosition(options.size) ? `zero` : ``}\"\n              data-position=\"${cur.value}\" style=\"${background}\">${cur.value + 1}</div>`;\n  }, ``);\n};\n\nexport default class GameView extends AbstractView {\n  constructor(game, options) {\n    super();\n    this._size = options.size;\n    this._options = options;\n    this._game = game;\n    this._boneClickHandler = this._boneClickHandler.bind(this);\n    this._boneDragDropHandler = this._boneDragDropHandler.bind(this);\n  }\n\n  _getTemplate() {\n    let inlineBackground = ``;\n    if (this._options.background != null) {\n      inlineBackground = `background-image: url('${this._options.background}');`;\n    }\n    return `<div class=\"container_x${this._size} bones ${this._options.numberActive ? `` : `container_font-size-zero`}\"\n              style=\"${inlineBackground}\"\n              >\n    ${getTemlateBones(this._game, this._options, inlineBackground)}\n    <div class=\"popup_end-game visually-hidden\" style=\"${inlineBackground}\"></div>\n  </div>`;\n  }\n\n  showEndGame(stats) {\n    const endElement = this.getElement().querySelector(`.popup_end-game`);\n    endElement.classList.remove(`visually-hidden`);\n    if (!stats.surrender) {\n      endElement.innerHTML = `<p>Ура! Вы решили головоломку за ${formatGameDuration(stats.durationGame)} и ${stats.countMoves} ходов</p>`;\n    } else {\n      endElement.innerHTML = `<p>Бездушная машина справилась с задачей, но не огорчайтесь.<br> Попробуйте еще раз (:</p>`;\n    }\n  }\n\n  swapBone(swapElement) {\n    // поиск элемента по значению дата-атрибута\n    const swapTargetElement = this.getElement().querySelector(`[data-position='${swapElement}']`);\n    const swapVoidElement = this.getElement().querySelector(`.zero`);\n\n    const swapTargetElementClassImg = extractFirstClass(swapTargetElement.classList.value);\n    const swapVoidElementClassImg = extractFirstClass(swapVoidElement.classList.value);\n\n    const swapTargetElementClass = extractClassesExceptFirst(swapTargetElement.classList.value);\n    const swapVoidElementClass = extractClassesExceptFirst(swapVoidElement.classList.value);\n\n    swapTargetElement.className = `${swapTargetElementClassImg} ${swapVoidElementClass}`;\n    swapVoidElement.className = `${swapVoidElementClassImg} ${swapTargetElementClass}`;\n\n    swapTargetElement.classList.toggle(`zero`);\n    swapVoidElement.classList.toggle(`zero`);\n  }\n\n  numberDisplaySwitch() {\n    this.getElement().classList.toggle(`container_font-size-zero`);\n  }\n\n  _boneClickHandler(evt) {\n    evt.preventDefault();\n    this._callback.boneClick(evt);\n  }\n\n  setBoneClickHandler(callback) {\n    this._callback.boneClick = callback;\n    this.getElement().addEventListener(`click`, this._boneClickHandler);\n  }\n\n  removeBoneClickHandler() {\n    this.getElement().removeEventListener(`click`, this._boneClickHandler);\n  }\n\n  _boneDragDropHandler(evt) {\n    evt.preventDefault();\n    this._callback.boneDragDrop(evt);\n  }\n\n  setBoneDragDropHandler(callback) {\n    this._callback.boneDragDrop = callback;\n    this.getElement().addEventListener(`mousedown`, this._boneDragDropHandler);\n  }\n}\n","import AbstractView from './absctract-view';\nimport { formatGameDuration } from '../utils/utils';\n\nconst generateRecordItems = (score, size) => {\n  if (score[size].length === 0) {\n    return `<li class=\"score__item-empty\">\n              <span class=\"score__empty-row\">Тут еще никто не выиграл.</span>\n              <span class=\"score__empty-row\">Сделай это!</span>\n            </li>`;\n  }\n  return score[size].reduce((acc, cur, i) => {\n    acc += `<li class=\"score__item\">\n              <span class=\"score__item-number\">${i + 1}</span>\n              <span class=\"score__item-moves\">${cur.countMoves}</span>\n              <span class=\"score__item-duration\">${formatGameDuration(cur.durationGame)}</span>\n            </li>`;\n    return acc;\n  }, `<li class=\"score__item\">\n              <span class=\"score__item-number\">№</span>\n              <span class=\"score__item-moves\">Moves</span>\n              <span class=\"score__item-duration\">Time</span>\n            </li>`);\n};\n\nexport default class ScoreView extends AbstractView {\n  constructor(score, size) {\n    super();\n\n    this._score = score;\n    this._size = size;\n\n    this._closeScoreClickHandler = this._closeScoreClickHandler.bind(this);\n    this._changeRecordsByTypeOfGame = this._changeRecordsByTypeOfGame.bind(this);\n\n    this._setHandlers();\n  }\n\n  _getTemplate() {\n    return `<div class=\"score_wrapper\">\n              <div class=\"score_container\">\n              <ul class=\"score__size-control-list\">\n                <li class=\"score__size-item\">\n                  <label>\n                    <input class=\"visually-hidden\" type=\"radio\" name=\"size-score\" value=\"3\" ${this._size === `3` ? `checked` : ``}>\n                    <span class=\"radio-indicator_score\">3X3</span>\n                  </label>\n                </li>\n                <li class=\"score__size-item\">\n                  <label>\n                    <input class=\"visually-hidden\" type=\"radio\" name=\"size-score\" value=\"4\" ${this._size === `4` ? `checked` : ``}>\n                    <span class=\"radio-indicator_score\">4X4</span>\n                  </label>\n                </li>\n                <li class=\"score__size-item\">\n                  <label>\n                    <input class=\"visually-hidden\" type=\"radio\" name=\"size-score\" value=\"5\" ${this._size === `5` ? `checked` : ``}>\n                    <span class=\"radio-indicator_score\">5X5</span>\n                  </label>\n                </li>\n                <li class=\"score__size-item\">\n                  <label>\n                    <input class=\"visually-hidden\" type=\"radio\" name=\"size-score\" value=\"6\" ${this._size === `6` ? `checked` : ``}>\n                    <span class=\"radio-indicator_score\">6X6</span>\n                  </label>\n                </li>\n                <li class=\"score__size-item\">\n                  <label>\n                    <input class=\"visually-hidden\" type=\"radio\" name=\"size-score\" value=\"7\" ${this._size === `7` ? `checked` : ``}>\n                    <span class=\"radio-indicator_score\">7X7</span>\n                  </label>\n                </li>\n                <li class=\"score__size-item\">\n                  <label>\n                    <input class=\"visually-hidden\" type=\"radio\" name=\"size-score\" value=\"8\" ${this._size === `8` ? `checked` : ``}>\n                    <span class=\"radio-indicator_score\">8X8</span>\n                  </label>\n                </li>\n              </ul>\n              <ul class=\"score__list\">\n                ${generateRecordItems(this._score, this._size)}\n              </ul>\n              <div class=\"score__close-wrapper\">\n                <p class=\"score__close btn\">Закрыть</p>\n              </div>\n\n            </div>\n            </div>`;\n  }\n\n  _setHandlers() {\n    this.getElement().addEventListener(`change`, this._changeRecordsByTypeOfGame);\n  }\n\n  _closeScoreClickHandler(evt) {\n    evt.preventDefault();\n    this._callback.closeScoreClickHandler(evt);\n  }\n\n  setCloseScoreClickHandler(callback) {\n    this._callback.closeScoreClickHandler = callback;\n    this.getElement().querySelector(`.score__close`).addEventListener(`click`, this._closeScoreClickHandler);\n  }\n\n  _changeRecordsByTypeOfGame(evt) {\n    this.getElement().querySelector(`.score__list`).innerHTML = generateRecordItems(this._score, evt.target.value);\n  }\n}\n"],"sourceRoot":""}